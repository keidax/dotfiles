# Notes on environment variables:
# WRONG `if '$var'` uses session variables, but `if -F '$var'` uses global
# `if '$var'` uses global variables, but `if -F '$var'` uses previous global value?
# Format expansions use global variables
# Within tmux, variables (and escape sequences) are always expanded inside
# double quotes, and passed literally in single quotes.
# Format strings are also passed through strftime, so any percent characters
# must be escaped.

# Enable mouse support
set -g mouse on

# Turn on 256-color support
# NOTE: `tmux -2` might be required if outer TERM is incorrect
set -g default-terminal "tmux-256color"
# set -g default-terminal "screen-256color"

# Needed on macOS to allow italics
set -as terminal-overrides ',xterm*:sitm=\E[3m:ritm=\E[23m'

# Set prefix to Ctrl-Space
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# More responsive Esc
set -sg escape-time 100

# Long scrollback buffer
set -g history-limit 50000

# Enable focus events
set -g focus-events on

# Renumber remaining windows when one is close
set -g renumber-windows on

# Start indexing from 1
set -g base-index 1
set -gw pane-base-index 1

# Highlight activity in status line
set -g monitor-activity on


# Bindings
# Reload config file
bind R source-file ~/.tmux.conf \; display "./.tmux.conf reloaded"

# $_tmux_show_index controls window numbers
bind I if '[ $_tmux_show_index -eq 1 ]' \
'setenv -g _tmux_show_index 0; refresh -S' \
'setenv -g _tmux_show_index 1; refresh -S'
setenv -g _tmux_show_index 0

# Quick binding for last window
bind Space last-window

# Alternate bindings for switching windows
bind C-n next-window
bind C-p previous-window

# Bindings to navigate and create new splits, mimicking Vim mappings
bind j select-pane -D
bind k select-pane -U
bind h select-pane -L
bind l select-pane -R
bind C-j select-pane -D
bind C-k select-pane -U
bind C-h select-pane -L
bind C-l select-pane -R

bind n switch-client -T window
bind -T window j split-window -v
bind -T window k split-window -v -b
bind -T window h split-window -h -b
bind -T window l split-window -h

bind -T window w switch-client -T fullwindow
bind -T fullwindow j split-window -f -v
bind -T fullwindow k split-window -f -v -b
bind -T fullwindow h split-window -f -h -b
bind -T fullwindow l split-window -f -h

bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# Binding tweaks for copy mode
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi Space send -X halfpage-down

# Incremental search for copy-mode-vi
bind-key -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -p "/" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -p "?" "send -X search-backward-incremental \"%%%\""

# Use system clipboard on macOS
if '[ $OS = "Darwin" ]' \
'bind-key -T copy-mode-vi y send -X copy-pipe pbcopy'


# Visuals (for Base16 Shell)
# Status line
set -g status-left "#[bg=colour20,fg=colour18]⟦#S⟧#[bg=colour8] #(internet-info) "
set -g status-left-length 60
set -g status-right " \"#{pane_title}\" #[bg=colour8,fg=colour7] %H:%M #[bg=colour20,fg=colour18]%F"
set -g status-right-length 50
set -g status-justify centre
set -g status-style fg=colour20,bg=colour19

# Dim inactive panes
set -gw window-active-style fg=colour7
set -gw window-style fg=colour8

# Match borders to pane color
set -gw pane-active-border-style fg=white,bg=colour19
set -gw pane-border-style fg=colour8,bg=colour18

## "Macros" for formatting
# Window index that can be toggled with <Prefix>I
setenv -g show_index '\
#{?#(printf $_tmux_show_index),\
#[fg=blue]#[reverse]#[bold]#I#[noreverse]#[nobold],\
}'

# Window title
setenv -g show_title '#[noreverse,#(\
flags="#{window_flags}"; \
[ "${flags#*M}" != "$flags" ] && \
    printf "fg=colour16" \
|| \
    printf "fg=colour20" \
;)]#{?window_active,#[bold],#[italics]}\
#{?window_active,», }\
#{?window_last_flag,#[underscore],}\
#W#[nounderscore]#{?window_active,«,}'

# Window flags, with visual changes
setenv -g show_flags '#[noitalics,nounderscore]\
#{?window_zoomed_flag,+,}\
#{?window_activity_flag,#[fg=colour15]*#[fg=white], }\
#{?window_bell_flag,#[fg=red]!#[fg=white], }\
#{?window_active,, }'

set -ga update-environment "show_index"
set -ga update-environment "show_flags"
set -ga update-environment "show_title"

# We have to set the formats in a hook, so that the global variables are
# expanded to their new values.
set-hook -g session-created '\
set -gw window-status-format         "$show_index$show_title$show_flags"; \
set -gw window-status-current-format "$show_index$show_title$show_flags"'
