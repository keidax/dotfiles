#!/bin/sh

# Silence messages at startup like [2] + Done <command>
set +m

# Some helper functions
prepend_to_path () {
    if [ -d "$1" ] ; then
        PATH="$1:$PATH"
    fi
}

append_to_path () {
    if [ -d "$1" ] ; then
        PATH="$PATH:$1"
    fi
}

prepend_to_manpath () {
    if [ -d "$1" ] ; then
        if [ -n "$MANPATH" ]; then
            MANPATH="$1:$MANPATH"
        else
            MANPATH="$1"
        fi
    fi
}

# We use the output from programs like brew, python, or ruby in our PATH
# variables, but each of these can have a noticeable sub-second delay on
# startup. We can run every significant external program in parallel to get a
# quicker startup experience. Capturing their asynchronous output in parallel
# is not possible, so we use a helper script to set up FIFO queues and read
# from these when the async processes are done.
. "$DOTDIR/shell/async_helper"

async_queue_init prepend
async_queue_init append
async_queue_init manpath

{
if [ "$OS" = "Darwin" ] ; then
    brew_prefix="$(brew --prefix)"

    # Add brew coreutils without 'g' prefix
    async_queue_write prepend "$brew_prefix/opt/coreutils/libexec/gnubin"
    # Add man pages from brew coreutils
    async_queue_write manpath "$brew_prefix/opt/coreutils/libexec/gnuman"
fi
} &

# Include user pip packages
{
if command_exists python3 ; then
    async_queue_write prepend "$(python3 -c "import os, site;\
        print(os.path.join(site.USER_BASE, 'bin'))")"
elif command_exists python2 ; then
    async_queue_write prepend "$(python2 -c "import os, site;\
        print(os.path.join(site.USER_BASE, 'bin'))")"
fi
} &

# Include RubyGems bin folder
{
if command_exists gem ; then
    async_queue_write append "$(ruby -e 'print Gem.user_dir')/bin"
fi
} &

# Include LuaRocks install
{
if command_exists luarocks; then
    # Output might include /usr/local/bin, so trim it to the first path item
    async_queue_write append "$(luarocks path --lr-bin | cut -d: -f1)"
fi
} &

# Include global NPM installation
{
if command_exists npm; then
    npm_prefix="$(npm config get prefix --global)"

    async_queue_write prepend "$npm_prefix/bin"
    async_queue_write manpath "$npm_prefix/share/man"
fi
} &

# Wait for all async jobs
wait

while async_queue_read_line prepend line; do
    # shellcheck disable=2154
    prepend_to_path "$line"
done
async_queue_close prepend

while async_queue_read_line append line; do
    append_to_path "$line"
done
async_queue_close append

# Ensure RVM is at the end of PATH
append_to_path "$HOME/.rvm/bin"

# Include user's local bin folder(s)
prepend_to_path "$HOME/.local/bin"
prepend_to_path "$HOME/bin"

# Include current dir on PATH
PATH=".:$PATH"

export PATH

while async_queue_read_line manpath line; do
    prepend_to_manpath "$line"
done
async_queue_close manpath

# Include local utility documentation
prepend_to_manpath "$HOME/.zplug/doc/man"
prepend_to_manpath "$HOME/.fzf/man"

# MANPATH should be prefixed by a colon, so it is appended to the default
# man search path instead of overriding it.
[ -n "$MANPATH" ] && {
    [ "$MANPATH" = "${MANPATH#:}" ] && MANPATH=":$MANPATH"
    export MANPATH
}

case $- in
    # This seems to raise an error in non-interactive zsh, so only turn on for
    # interactive shells. Unfortunately in the Dash shell this generates
    # messages like "[2] + Done" that cannot be suppressed.
    *i*) set -m;;
esac
